#! /usr/bin/env nix-shell
#! nix-shell -i 'guile -e main' -p guile git
!#
;; vim: ft=scheme

(use-modules (io-helpers)
             (pipe))

(define lockfile (home-path "dots/nixos/pkgs/versions.scm"))
(define temp-clone-dir (home-path "dl/tmp"))

(define (dl repo)
  ((lambda (clone-location)
     ;; TODO: Shallow clone if there is a date, i.e. (assoc-ref repo 'date).
     (system* "git" "clone" (assoc-ref repo 'url) clone-location)
     clone-location)
   (find-new-dir-from 1)))

(define (version-info repo-location)
  (enter-dir repo-location)
  ((lambda (url tag commit)
     (chdir temp-clone-dir)
     (rmdir* repo-location)
     (->> (acons 'commit commit '())
          (acons 'tag (if (string-null? tag) #f tag))
          (acons 'url url)))
   (-> (system-output "git remote show origin -n")
       (string-split (lambda (c) (char=? c #\newline)))
       (cadr)
       (string-split char-whitespace?)
       ((lambda (ls) (filter (lambda (s) (not (string-null? s))) ls)))
       (caddr))
   (-> (system-output "git describe --abbrev=0 --tags")
       (string-trim-right #\newline))
   (-> (system-output "git rev-parse HEAD")
       (string-trim-right #\newline))))

(define (main args)
  ((lambda (port)
     ((lambda (repos)
        (enter-dir temp-clone-dir)
        (->> (map dl repos)
             (map version-info)
             (update port))
        ;; temp-clone-dir could have already existed with contents, which we do
        ;; not check for, therefore only delete it if it is empty now.
        (when (null? (fs-tree* temp-clone-dir))
              (rmdir temp-clone-dir)))
      (read port)))
   (open-file lockfile "r+")))

;; Local Variables:
;; mode: scheme
;; End:
