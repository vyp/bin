#! /usr/bin/env nix-shell
#! nix-shell -i 'guile -e main' -p guile nano ffmpeg mpv atomicparsley youtube-dl
!#
;; vim: ft=scheme

(use-modules (ice-9 pretty-print)
             (ice-9 match)
             (srfi srfi-1)
             (alist-utils)
             (io-helpers)
             (pipe) (string-utils))

(define store         (home-path "music/store"))
(define lib           (home-path "music/lib"))
(define playlists-dir (home-path "music/playlists"))
(define status-file   (string-append store "/status.scm"))

(define (args->song args)
  (let* ((playlists (cddr args))
         (ratings (filter string->number playlists))
         (rating (if (null? ratings) #f (car ratings))))
    (->> (acons 'playlists (lset-difference equal? playlists ratings) '())
         (acons 'rating rating)
         (acons 'url (cadr args)))))

(define (current-status)
  ((lambda (port)
     (flock port LOCK_EX)
     ((lambda (status)
        (cons status port))
      (read port)))
   (open-file status-file "r+")))

(define (status-add status ls song)
  (-> (assoc-ref status ls)
      (append (list song))
      ((lambda (value) (assoc-replace ls value status)))))

(define (status-remove status ls song)
  (->> (assoc-ref status ls)
       (delete song)
       ((lambda (value) (assoc-replace ls value status)))))

(define (status-replace status ls old-song new-song)
  (-> (status-remove status ls old-song)
      (status-add ls new-song)))

;; TODO: Switch status and port argument order.
(define (update-status status port)
  (seek port 0 SEEK_SET)
  (truncate-file port)
  (pretty-print status port)
  (close-port port))

(define (get-title song)
  (-> (string-append "youtube-dl --get-title '" (assoc-ref song 'url) "'")
      (system-output)
      (string-trim-right #\newline)
      ((lambda (value) (assoc-replace 'title value song)))))

(define (derive-potential-artist-and-track song)
  ((lambda (title-split)
     (->> song
          (acons 'track (if title-split (cadr title-split) #f))
          (acons 'artist (if title-split (car title-split) #f))))
   (string-substring-split (assoc-ref song 'title) " - ")))

(define (find-same-song status-list ref-song)
  (->> status-list
       (find (lambda (song) (equal? (assoc-ref song 'url)
                               (assoc-ref ref-song 'url))))))

(define (retrieve-missing-titles)
  (let* ((curstatus (current-status))
         (status (car curstatus))
         (port (cdr curstatus)))
    (->> (assoc-ref status 'wishlist)
         (filter (lambda (song) (equal? #f (assoc-ref song 'title))))
         (map get-title)
         (map derive-potential-artist-and-track)
         (fold
          (lambda (song alist)
            (status-replace
             alist 'wishlist
             (find-same-song (assoc-ref alist 'wishlist) song) song)) status)
         ((lambda (alist) (update-status alist port))))))

(define (find-new-dir-from candidate)
  ((lambda (dir)
     (if (file-exists? dir)
         (find-new-dir-from (+ 1 candidate))
         dir))
   (number->string candidate)))

(define (dl song)
  (chdir store)
  ((lambda (storage-location)
     (enter-dir storage-location)
     (system* "youtube-dl" "-f" "140" (assoc-ref song 'url))
     (acons 'storage-location storage-location song))
   (find-new-dir-from 1)))

(define (grant-wishes)
  (let* ((curstatus (current-status))
         (status (car curstatus))
         (port (cdr curstatus)))
    (->> (assoc-ref status 'wishlist)
         (map dl)
         (fold (lambda (song alist) (status-add alist 'available song)) status)
         (assoc-replace 'wishlist '())
         ((lambda (alist) (update-status alist port))))))

(define (main args)
  (mkdir-p store lib playlists-dir)
  (touch-files status-file)
  (if (> (length args) 1)
      (let* ((curstatus (current-status))
             (status (car curstatus))
             (port (cdr curstatus)))
        (-> (status-add status 'wishlist (args->song args))
            (update-status port)))
      (begin
        (retrieve-missing-titles)
        (grant-wishes)
        (bell))))

;; Local Variables:
;; mode: scheme
;; End:
