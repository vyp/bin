#!/run/current-system/sw/bin/guile \
-e main -s
!#

(use-modules (personal scripting))
(use-modules (site pipe))

(use-modules (ice-9 match))
(use-modules (srfi srfi-1))

(define curtag
  (-> (system-output "herbstclient attr tags.focus.name")
      (string-trim-right #\newline)))

(define clients
  (-> (system-output "herbstclient attr tags.focus.client_count")
      (string-trim-right #\newline)
      (string->number)))

(define tags
  (->> (string-split (system-output "herbstclient tag_status")
                     char-whitespace?)
       (filter (lambda (s) (not (string-null? s))))))

(define (xcolor-name xresource)
  (substring xresource
             (+ 1 (string-index xresource #\.))
             (string-index xresource #\:)))

(define (xcolor-value xresource)
  (->> (substring xresource (+ 1 (string-index xresource #\:)))
       (string-trim-both)))

(define xcolors
  (->> (string-split (system-output "xrdb -query")
                     (lambda (c) (char=? c #\newline)))
       (filter (lambda (xresource) (string-prefix? "polybar." xresource)))
       (fold (lambda (xresource alist)
               (acons (xcolor-name xresource)
                      (xcolor-value xresource) alist)) '())))

(define (tag-name tag)
  (string (string-ref tag 1)))

(define (tag-status tag)
  (match (string (string-ref tag 0))
         ("!" 'urgent)
         ("#" (if (zero? clients) 'free 'occupied))
         (":" 'occupied)
         ("." 'free)))

(define (tag-status->icon status)
  (match status
         ('free "")
         ('urgent "")
         ('occupied "")))

(define (get-bg color)
  (string-append "%{B" (assoc-ref xcolors color) "}"))

(define (get-fg color)
  (string-append "%{F" (assoc-ref xcolors color) "}"))

(define (get-u color)
  (string-append "%{u" (assoc-ref xcolors color) "}"))

(define (tag-string tag)
  (let ((padding "   ")
        (bg "")
        (fg "")
        (u "")
        (reset "%{B-}%{F-}%{u#00ffffff}")
        (status (tag-status tag))
        (curtag? (equal? (tag-name tag) curtag)))
    (when curtag?
          (set! bg (get-bg "date_background"))
          (set! u (get-u (match status
                                ('free "faded_foreground")
                                ('urgent "color1")
                                ('occupied "foreground")))))
    (match status
           ('free (set! fg (get-fg "faded_foreground")))
           ('urgent (begin
                      (set! fg (get-fg "color1"))
                      (set! u (get-u "color1"))))
           (_ #t))
    (string-append bg fg u
                   padding
                   (tag-status->icon status)
                   padding
                   reset)))

(define (main args)
  (display (string-join (map tag-string tags) "")))
