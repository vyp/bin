#!/run/current-system/sw/bin/guile \
-e main -s
!#

(use-modules (personal scripting))
(use-modules (site pipe))

(use-modules (ice-9 match))

(define curtag
  (-> (system-output "herbstclient attr tags.focus.name")
      (string-ref 0)
      (string)))

(define tags
  (->> (string-split (system-output "herbstclient tag_status")
                     char-whitespace?)
       (filter (lambda (s) (not (string-null? s))))))

(define (xcolor-name xresource)
  (substring xresource
             (+ 1 (string-index xresource #\.))
             (string-index xresource #\:)))

(define (xcolor-value xresource)
  (->> (substring xresource (+ 1 (string-index xresource #\:)))
       (string-trim-both)))

(define xcolors
  (let ((xcolors '()))
    (->> (string-split (system-output "xrdb -query")
                       (lambda (c) (char=? c #\newline)))
         (filter (lambda (xresource) (string-prefix? "polybar." xresource)))
         (map (lambda (xresource)
                (set! xcolors (acons (xcolor-name xresource)
                                     (xcolor-value xresource)
                                     xcolors))
                xresource)))
    xcolors))

(define (tag-name tag)
  (string (string-ref tag 1)))

(define (tag-status tag)
  (string (string-ref tag 0)))

(define (tag-name->icon name)
  (match name
         ("1" "")
         ("2" "")
         ("3" "")
         ("4" "")
         ("5" "")
         ("6" "")
         ("7" "")
         ("8" "")
         ("9" "")
         ("0" "")
         (_   "")))

(define (set-bg color)
  (string-append "%{B" (assoc-ref xcolors color) "}"))

(define (set-fg color)
  (string-append "%{F" (assoc-ref xcolors color) "}"))

(define (set-u color)
  (string-append "%{u" (assoc-ref xcolors color) " +u}"))

(define (tag-string tag)
  (let ((padding "   ")
        (bg "")
        (fg "")
        (u "")
        (reset "%{B-}%{F-}%{u-}"))
    (if (equal? (tag-name tag) curtag)
        (begin
          (set! bg (set-bg "date_background"))
          (if (equal? (tag-status tag) "!")
              (begin
                (set! fg (set-fg "color1"))
                (set! u (set-u "color1")))
              (set! u (set-u "foreground"))))
        (if (equal? (tag-status tag) "!")
            (begin
              (set! fg (set-fg "color1"))
              (set! u (set-u "color1")))
            (when (equal? (tag-status tag) ".")
                  (set! fg (set-fg "color8")))))
    (string-append bg fg u
                   padding
                   (tag-name->icon (tag-name tag))
                   padding
                   reset)))

(define (main args)
  (display (string-join (map tag-string tags))))
