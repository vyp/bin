#!/usr/bin/env zsh

start-slideshow () {
  while :; do
    sleep $interval
    # next
  done
}

stop-slideshow () {
  if [[ -n $REPLY ]]; then
    kill $REPLY
    REPLY=''
  fi
}

subdirs () {
  local filename=$(basename "$1")
  local subdirs=${1#$walls/}
  echo ${subdirs%/$filename}
}

add () {
  local subdirs=$(subdirs "$1")
  local link="$walls/$active_dirname/$subdirs/$(basename $1)"

  if [[ -f "$1" ]]; then
    mkdir -p "$walls/$active_dirname/$subdirs"
    [[ -L "$link" ]] || ln -s "$1" "$link"
  fi
}

# Symlinks arguments to active directory. Directories are recursively expanded
# to their contents.
activate () {
  for file in $@; do
    if [[ ${file:0:1} != '/' ]]; then
      file="$walls/$file"
    else
      [[ "$file" =~ "$walls" ]] || continue
    fi

    if [[ -d "$file" ]]; then
      [[ "$file" != "$walls/$active_dirname" ]] && activate $file/*(N)
    else
      if [[ ${#filetypes[@]} -eq 0 ]]; then
        add "$file"
      else
        for filetype in $filetypes; do
          if [[ "$file" == *.$filetype ]]; then
            add "$file"
            break
          fi
        done
      fi
    fi
  done
}

deactivate () {
  echo "$1"
  # for file in $@; do
  #   file="$walls/$file"

  #   if [[ -d "$file" ]]; then
  #     [[ "$file" != "$walls/$active_dirname" ]] && deactivate $file/*(N)
  #   else
  #   fi
  # done
}

main () {
  . ~/env/bin/wpd

  # Exit with error if $fifo file already exists but isn't a pipe. Otherwise
  # create pipe if it doesn't exist.
  [[ -p $fifo ]] || ([[ -f $fifo ]] && exit 1 || mkfifo $fifo)

  mkdir -p "$walls/$active_dirname"
  local -a curwp

  while :; do
    args=$(<$fifo)
    args=${(z)args}

    case "${args:0:1}" in
      ':')
        stop-slideshow
        rm $fifo
        break
        ;;
      '=')
        echo $cmd $cmd_opts $curwp
        ;;
      '_')
        [[ $shuffle -eq 0 ]] && shuffle=1 || shuffle=0
        ;;
      '.')
        echo next
        ;;
      ',')
        echo prev
        ;;
      '+')
        if [[ -n ${args:1:2} ]]; then
          if [[ ${args:1:2} -eq 0 ]]; then
            stop-slideshow
          else
            stop-slideshow
            interval=${args:1:2}
            # PID of start-slideshow subshell is stored in $REPLY variable.
            read < <(start-slideshow & echo $!)
          fi
        else
          if [[ -z $REPLY ]]; then
            read < <(start-slideshow & echo $!)
          else
            stop-slideshow
          fi
        fi
        ;;
      '!')
        [[ -z ${args:1} ]] && echo no || deactivate ${args:1}
        ;;
      *)
        [[ -z $args ]] && activate $walls || activate $args
        ;;
    esac
  done
}

main
